MODULE(sizeof);
SYSTEM;
  so: StdOut;
PROBLEM;

  SPC so DATION OUT SYSTEM ALPHIC ;
  DCL stdout DATION OUT ALPHIC DIM(*,80) FORWARD  CREATED (so);

p: PROC(array(,) FIXED(31) IDENT) RETURNS (FIXED(31));
   RETURN (SIZEOF array);
END;

rcProc: PROC;
   DCL c CHAR(10);
   DCL rc REF CHAR();
   DCL f FIXED;
   f = SIZEOF rc;
   f = SIZEOF rc MAX;
   f = SIZEOF rc LENGTH;
END;

t1: TASK MAIN;
    DCL ok BIT(1) INIT('1'B1);
    DCL du DURATION;
    DCL cl CLOCK;
    DCL f FIXED(31);
    DCL c CHAR(1);
    DCL fl FLOAT(52);
    DCL fArray(10,20) FIXED(31);
    DCL s STRUCT [ x FIXED(31), y FLOAT(52) ]; 

    DCL sArray(10) STRUCT [ x FIXED(31), y FLOAT(52) ]; 
!f = SIZEOF p;
!f = SIZEOF t1;
!f = SIZEOF stdout;
    OPEN stdout;

    f = SIZEOF f + SIZEOF c;
    IF f NE 5 THEN
        PUT 'SIZEOF f + SIZEOF c delivers ',f , ' instead of 5' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;


!    f = SIZEOF STRUCT [ x FIXED(31), y FLOAT(52) ] FIT f; ! not allowed
!    grammar defines: SIZEOF x may be appled of simple type or identifier
    f = SIZEOF s FIT f;
    IF f NE 16 THEN
        PUT 'SIZEOF s delivers ',f , ' instead of 16' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;

    f := (SIZEOF DURATION ) FIT f ;

    IF f NE 8 THEN
        PUT 'SIZEOF(DURATION) delivers ',f , ' instead of 8' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;

    f := (SIZEOF du ) FIT f ;
    IF f NE 8 THEN
        PUT 'SIZEOF(DURATION) delivers ',f , ' instead of 8' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;

    f := (SIZEOF cl)  FIT f;
    IF f NE 8 THEN
        PUT 'SIZEOF(CLOCK) delivers ',f , ' instead of 8' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;
    f := (SIZEOF f)  FIT f;
    IF f NE 4 THEN
        PUT 'SIZEOF(FIXED(28)) delivers ',f , ' instead of 4' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;
    f :=( SIZEOF c) FIT f;
    IF f NE 1 THEN
        PUT 'SIZEOF(CHAR(1)) delivers ',f , ' instead of 1' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;
    f := (SIZEOF fl) FIT f;
    IF f NE 8 THEN
        PUT 'SIZEOF(FLOAT(53)) delivers ',f , ' instead of 8' TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;


    f := (SIZEOF fArray) FIT f;     ! produces sizeof(_fArray) 
    IF f NE 800 THEN
        PUT 'SIZEOF(FIXED(31) Array 10*20) delivers ',f , ' instead of 800'
           TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;

    f = p(fArray);
    IF f NE SIZEOF fArray THEN
        PUT 'p(FIXED(31) Array 10*20) delivers ',f , ' instead of 800'
           TO stdout
           BY A,F(3), A, SKIP; 
        ok = '0'B1;
    FIN;

 
    f = (SIZEOF s) FIT f;
    IF f NE 16 THEN   ! 16 due to alignemnt reasons
        PUT 'SIZEOF(STRUCT[FIXED(31),FLOAT(53)] delivers ',f , 
           ' instead of 16'
           TO stdout
           BY A,F(3), A, SKIP; 
    FIN;

    f = (SIZEOF sArray) FIT f;
    IF f NE 160 THEN   ! 160 due to alignment reasons
        PUT 'SIZEOF((10) STRUCT[FIXED(31),FLOAT(53)] delivers ',f , 
           ' instead of 160'
           TO stdout
           BY A,F(3), A, SKIP; 
    FIN;

   
    IF ok THEN
        PUT 'success' TO stdout BY A,SKIP;
    ELSE
        PUT 'failure' TO stdout BY A,SKIP;
    FIN;

    CLOSE stdout;

END;

MODEND;
