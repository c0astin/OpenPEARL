/*
Problem part of filament extruder simulation module
*/

MODULE(SimFilExtruder);

PROBLEM;
! ==========================================================================
! Init
! ==========================================================================
SPC openFileErr SIGNAL GLOBAL; !OpenFailedSignal for config file error handling
SPC contactswitchirpt IRPT GLOBAL; !Triggers when spool contact switch is activated

!Pipes for IPC: Simulator / UserProgram <-> Web User Interface
!readMsgPipe / writeMsgPipe are accessible for user via Dation.
!Alternativly user can establish his own pipe connection to UI without using the Dation.
SPC pipeSim DATION INOUT SYSTEM ALL GLOBAL(SimFilExtruder);
DCL writeLogPipe DATION OUT ALPHIC DIM(*,100) FORWARD CREATED(pipeSim);
SPC pipeMsgIn DATION IN SYSTEM ALL GLOBAL(SimFilExtruder);
DCL readMsgPipe DATION IN BIT(64) DIM(*,100) FORWARD CREATED(pipeMsgIn);
SPC pipeMsgOut DATION OUT SYSTEM ALL GLOBAL(SimFilExtruder);
DCL writeMsgPipe DATION OUT BIT(64) DIM(*,100) FORWARD CREATED(pipeMsgOut);

!config file to change some parameters without having to rebuild runtime
DCL configFileName CHAR(20) INIT('extruderSim.cfg');
DCL cfgFile DATION IN ALPHIC DIM(*,70) FORWARD CREATED(homeFolder);

SPC homeFolder DATION INOUT SYSTEM ALL GLOBAL(SimFilExtruder);
DCL logFile DATION OUT ALPHIC DIM(*,100) FORWARD  CREATED(homeFolder);
DCL fileName CHAR(7) INIT('sim.log');

DCL sema SEMA PRESET(1);

! =================PARAMETER DECLARATION================= !
! ==========================================================================
! General parameters
! ==========================================================================
! Status of Simulator
DCL simulation_is_running BIT(1) INIT('0'B1);
! Main Loop interval [s]
DCL sim_interval DUR INIT (0.01 SEC);
! Factor to speed up screw heating
DCL sim_speed_factor FLOAT INIT(10.0); 
! Logging interval
DCL log_interval DUR INIT (1 SEC);


DCL pi INV FLOAT INIT(3.1415926);
! ==========================================================================
! Material properties: PLA & Steel
! ==========================================================================
! PLA: Min. processing temperature
DCL min_processing_temp FIXED(15) INIT(170);
! PLA: Max. processing temperature
DCL max_processing_temp FIXED(15) INIT(210);
! PLA: Material density in [g/mm^3]
DCL density FLOAT INIT(0.00124);
! PLA: Specific heat capacity in [J/kg*K]
DCL spec_heat_pla FLOAT INIT(1800.0);
! Steel: Specific heat capacity in [J/kg*K]
DCL spec_heat_steel FLOAT INIT(480.0);
! Steel - Air: Heat transfer coefficient in [W/m^2*K]
DCL h_air_steel FLOAT INIT (25.0);

! ==========================================================================
! Extruder: Geometric properties
! ==========================================================================
! Screw mass [kg]
DCL screw_mass FLOAT INIT(7.0);
!Screw helix angle
DCL theta_b FLOAT INIT (21);
! Extruder barrel diameter
DCL D_barrel FLOAT INIT (25); !Barrel diameter
! Cylinder surface average
DCL A_cylinder FLOAT INIT (1);
!Channel width [mm] CALCULATE 
DCL channel_width FLOAT INIT (15); 
!Channel depth [mm]
DCL channel_depth FLOAT INIT (3); 
!Compensation factor for drag due to flight resistance
DCL F_d FLOAT INIT (0.95); 
!Degree of fill / Bulk density [%]. 
!Multiplied with volumetric_flow. Acts as disturbance factor for diameter control.
DCL bulk_density FLOAT INIT (100);


! ==========================================================================
! Extruder: Screw Drive properties
! ==========================================================================
! Maximum revolution per min
DCL screwmotor_max_rpm FIXED(15) INIT(50); 
! Idle rpm (If extruder switched on and no rpm requested)
DCL screwmotor_idle_rpm FIXED(15) INIT(1);
! Extruder motor spinup speed in [rpm / s]
DCL screwmotor_spin_up_speed FLOAT INIT(25.0); 
! Extruder motor spindown speed in [rpm / s]
DCL screwmotor_spin_down_speed FLOAT INIT(50.0); 
! Requested rpm [revolutions/min]
DCL screwmotor_requested_rpm FIXED(15) INIT(0); 
! Current rpm [revolutions/min]
DCL screwmotor_current_rpm FLOAT INIT(0.0); 

! ==========================================================================
! Extruder: Screw Heater properties
! ==========================================================================
!Maximum pwm
DCL screwheater_max_pwm INV FIXED(15) INIT(100); 
! Max heating power [W]
DCL screwheater_power_max FLOAT INIT(800.0);
! Current pwm [%]
DCL screwheater_current_pwm FLOAT INIT(0.0); 
! Requested pwm [%]
DCL screwheater_requested_pwm FLOAT INIT(0.0);
! 1 if temperature is within target range
DCL temp_ok BIT(1) INIT('0'B1);
! 1 if temperature is above max allowed temp
DCL overtemp BIT(1) INIT('0'B1);

! ==========================================================================
! Extruder: Temperature Sensor
! ==========================================================================
! Temperature sensor value in [°C]
DCL temperature_sensor FLOAT INIT(23.0);
! Ambient temperature in °C
DCL ambient_temp FIXED(15) INIT(23);
! Max allowed screw temperature in °C
DCL overtemp_limit FIXED(15) INIT(300);

! ==========================================================================
! Winder: Drive Properties
! ==========================================================================
! Maximum revolution per min
DCL spoolermotor_max_rpm FIXED(15) INIT(300); 
! If spooler is switched on and no rpm is requested, spooler will run with this rpm
DCL spoolermotor_idle_rpm FIXED(15) INIT(1);
! Spooler motor spinup time in [rpm]
DCL spoolermotor_spin_up_speed FIXED(15) INIT(100); 
! Spooler motor spindown time in [rpm]
DCL spoolermotor_spin_down_speed FIXED(15) INIT(200); 
! Requested rpm [revolution/min]
DCL spoolermotor_requested_rpm FIXED(15) INIT(0); 
! Current rpm [revolution/min]
DCL spoolermotor_current_rpm FLOAT INIT(0.0); 

! ==========================================================================
! Winder: Geometric Properties & State
! ==========================================================================
!Inner spool diameter
DCL spool_diameter FIXED(15) INIT(52);
! Current winding diameter [mm]. Initialize with inner spool diameter
DCL winding_diameter FLOAT INIT(52.0);
!Max winding diameter [mm]. Triggers contact switch
DCL max_winding_diameter FLOAT INIT(70);
! Spool width [mm]
DCL spool_width FIXED(15) INIT(67);
! Total number of filament windings on current spool
DCL total_revs FLOAT INIT(0.0);
! Number of windings at current layer
DCL total_revs_layer FLOAT INIT(0.0);
! Total filament mass (wound up)
DCL wound_up_fil_mass FLOAT INIT(0.0);
! 1 if System is currently winding filament
DCL winding BIT(1) INIT ('0'B1);
! Time since motors running in ms
DCL prep_time FIXED INIT(0);

!  ||oo     ||<--current layer (3)
!  ||ooooooo||
!  ||ooooooo||
!  ||-------||
!  ||       ||<--spool
!  ||-------||
!  ||ooooooo||
!  ||ooooooo||
!  ||o      ||

! ==========================================================================
! Winder: Filament Diameter Sensor
! ==========================================================================
! Filament diameter measured by laser sensor in [mm]
DCL diameter_sensor FLOAT INIT(0.0);
! Average diameter at current winding layer
DCL avg_dia_layer FLOAT INIT(0.0);
! Average diameter since start of winding
DCL avg_dia FLOAT INIT(0.0);
! Upper diameter limit. If calculated diameter is larger then limit, diameter is set to limit
DCL upper_diameter_limit FLOAT INIT(5.0);

! ==========================================================================
! Winder: Spool contact switch
! ==========================================================================
! Switches from off to on when spool is full (winding_diameter > max_winding_diameter)
DCL contact_switch_enabled BIT(1) INIT('0'B1); 

! ==========================================================================
! Procedures called at start / stop of simulation
! ==========================================================================
start_simulation: PROC GLOBAL;
   !Read config from file
   DCL cfgErrors STRUCT [openErr BIT(1), readErrArray(10) FIXED];
   cfgErrors := read_config;

   openLogfile(fileName, '0'B1);

   !Write config load errors to logFile
   IF cfgErrors.openErr == '1'B1 THEN
      PUT 'WARNING: Keine Konfigurationsdatei gefunden. Default wird geladen.' TO logFile BY A, SKIP;
   FIN;
   FOR i TO 10
   REPEAT
      IF cfgErrors.readErrArray(i) > 0 THEN
         PUT 'WARNING: Fehler beim Lesen von Config-Eintrag Nr.', i, '.Default-Wert wird geladen.' TO logFile BY A,F(2),A, SKIP;
      FIN;
   END;

   !open pipes for IPC
   OPEN writeMsgPipe;
   OPEN writeLogPipe;
   OPEN readMsgPipe;

   log('STARTING SIMULATION');
   simulation_is_running = '1'B1;
   AFTER 1 SEC ACTIVATE log_status;
   ACTIVATE simulation;
END;
! ==========================================================================

stop_simulation: PROC GLOBAL;
   log('STOPPING SIMULATION');
   simulation_is_running = '0'B1;
   CLOSE writeLogPipe;
   CLOSE writeMsgPipe;
   CLOSE readMsgPipe;
   closeLogfile;	  
END;

! ==========================================================================
! SIMULATION MAIN TASK
! ==========================================================================

simulation: TASK PRIO 10;
   DCL current_clock CLOCK; !time of current cycle
   DCL last_update CLOCK; !time of the last update cycle
   DCL dt FLOAT;
   last_update = NOW;

   !Simulator main loop
   WHILE simulation_is_running
   REPEAT
      REQUEST sema;
      current_clock = NOW;
      dt := (current_clock - last_update) / 0.001 SEC; ! [ms]

      screwmotor_update(dt);
      screwheater_update(dt);
      spoolermotor_update(dt);
      diameter_sensor_update(dt);
      temperature_sensor_update(dt);
      process_surv(dt);
      contact_switch_update;
      RELEASE sema;
      
      last_update = current_clock;

      AFTER sim_interval RESUME;
   END;
END; !simulation main task

! ==========================================================================
! DATION: SCREW DRIVE
! ==========================================================================
! Returns the current rotation speed of the extruder screw in [revolutions/min]
get_screwmotor_rotational_speed: PROC RETURNS (FIXED(31)) GLOBAL;
   DCL rpm FIXED(31);
   REQUEST sema;
   rpm := ENTIER screwmotor_current_rpm;
   RELEASE sema;
   RETURN (rpm);
END; !get_screwmotor_rotational_speed

! ==========================================================================
! Send a request to set the rotational speed to the desired value in [revolutions/min]
set_screwmotor_rotational_speed: PROC(rpm FIXED(15)) GLOBAL;
   REQUEST sema;
   screwmotor_requested_rpm := rpm;
   RELEASE sema;
END; !set_screwmotor_rotational_speed

! ==========================================================================
screwmotor_update: PROC (dt FLOAT /* [ms] */);

!Check if screw temperature is within limits. If not make sure rpm is set to 0 and issue warning:
   IF temp_ok == '0'B1 AND screwmotor_requested_rpm > 0
   THEN
      screwmotor_requested_rpm = 0;
      log('WARNING: Temperature out of target range. Screw RPM set to 0 to prevent damage.');
   FIN;

!Check if requested rpm is smaller than permitted max rpm.
   IF screwmotor_requested_rpm > screwmotor_max_rpm
   THEN
      screwmotor_requested_rpm = screwmotor_max_rpm;
   FIN;

!Increase rpm to target rpm with defined spinup speed:  
   IF screwmotor_current_rpm < screwmotor_requested_rpm
   THEN  
      screwmotor_current_rpm := screwmotor_current_rpm + dt * screwmotor_spin_up_speed / 1000;
      IF screwmotor_current_rpm > screwmotor_requested_rpm
      THEN
         screwmotor_current_rpm = screwmotor_requested_rpm;
      FIN;
   FIN; 

!Decrease rpm to target rpm with defined spindown speed:
   IF screwmotor_current_rpm > screwmotor_requested_rpm
   THEN
      screwmotor_current_rpm := screwmotor_current_rpm - dt * screwmotor_spin_down_speed / 1000;   
      IF screwmotor_current_rpm < 0
      THEN
         screwmotor_current_rpm = 0;
      FIN;
      IF screwmotor_current_rpm < screwmotor_requested_rpm
      THEN
         screwmotor_current_rpm = screwmotor_requested_rpm;
      FIN;
   FIN;   
END; !screwmotor_update

! ==========================================================================
! DATION: HEATING ELEMENT
! ==========================================================================

! Returns the current pwm signal of the extruder heater in [%]
get_screwheater_pwm: PROC RETURNS (FIXED(31)) GLOBAL;
   DCL pwm FIXED(31);
   REQUEST sema;
   pwm := ENTIER screwheater_current_pwm;
   RELEASE sema;
   RETURN (pwm);
END;
! ==========================================================================

! Set the pwm signal of the extruder screw in [%]
set_screwheater_pwm: PROC(pwm FIXED(15)) GLOBAL;
   REQUEST sema;
      screwheater_requested_pwm := pwm;
   RELEASE sema;
END;
! ==========================================================================

screwheater_update: PROC (dt FLOAT /* [ms] */);
   !Turn off heater if temperature is too high.
   IF overtemp == '1'B1 AND screwheater_current_pwm > 0
   THEN
      log('WARNING: Overtemperature! Turn off heating element.');
   FIN;

   !Check if requested value is within limits and change pwm accordingly
   IF screwheater_requested_pwm > 0.0
   THEN
      IF screwheater_requested_pwm  > screwheater_max_pwm
      THEN 
         screwheater_current_pwm := screwheater_max_pwm;
      ELSE
         screwheater_current_pwm := screwheater_requested_pwm;
      FIN;
   ELSE
      screwheater_current_pwm := 0.0;
   FIN;
END;

! ==========================================================================
! DATION: TEMPERATURE SENSOR
! ==========================================================================

! Returns the temperature reading of the temperature sensor in [°C]
get_temperature_sensor: PROC RETURNS (FLOAT) GLOBAL;
   DCL temperature FLOAT;
   REQUEST sema;
   temperature := temperature_sensor;
   RELEASE sema;
   RETURN(temperature);
END;
! ==========================================================================

! Calculate current temperature sensor reading
temperature_sensor_update: PROC (dt FLOAT /* [ms] */);
   DCL temp_change FLOAT;
   DCL cooling_pwr_conv FLOAT;
   DCL cooling_pwr_fil FLOAT;
   DCL heating_pwr_element FLOAT;

   !Heating caused by heating element
   heating_pwr_element := screwheater_current_pwm*screwheater_power_max; 

   !Cooling caused by convection with surrounding air
   cooling_pwr_conv := (ambient_temp-temperature_sensor)*h_air_steel*A_cylinder;

   !Cooling caused by mass flow assuming heat transfer from screw and cylinder to polymer
   cooling_pwr_fil := (ambient_temp-temperature_sensor)*mass_flow * spec_heat_pla / 1000;

   !Resulting temperature change
   temp_change := (heating_pwr_element+cooling_pwr_conv+cooling_pwr_fil)*dt / (screw_mass*spec_heat_steel*100*1000);

   !New sensor reading
   temperature_sensor := temperature_sensor + sim_speed_factor*temp_change;
END;

! ==========================================================================
! SPOOLER MOTOR
! ==========================================================================

! Returns the current rotation speed of the spooler in [revolutions/min]
get_spoolermotor_rotational_speed: PROC RETURNS (FIXED(31)) GLOBAL;
   DCL rpm FIXED(31);
   REQUEST sema;
   rpm := ENTIER spoolermotor_current_rpm;
   RELEASE sema;
   RETURN (rpm);
END;
! ==========================================================================

! Request the rpm of the spooler in [rpm]
set_spoolermotor_rotational_speed: PROC(rpm FIXED(15)) GLOBAL;
   REQUEST sema;
   spoolermotor_requested_rpm := rpm;
   RELEASE sema;
END;
! ==========================================================================

spoolermotor_update: PROC (dt FLOAT /* [ms] */);
   !Check if requested rpm is smaller than permitted max rpm.
   IF spoolermotor_requested_rpm > spoolermotor_max_rpm
   THEN
      spoolermotor_requested_rpm := spoolermotor_max_rpm;	
   FIN;
   
   !Increase rpm to target rpm with defined spinup speed:
   IF spoolermotor_current_rpm < spoolermotor_requested_rpm
   THEN
      spoolermotor_current_rpm := spoolermotor_current_rpm + dt * spoolermotor_spin_up_speed / 1000;
      IF spoolermotor_current_rpm > spoolermotor_requested_rpm
      THEN
         spoolermotor_current_rpm = spoolermotor_requested_rpm;
      FIN;
   FIN;

   !Decrease rpm to target rpm with defined spindown speed:
   IF spoolermotor_current_rpm > spoolermotor_requested_rpm
   THEN
      spoolermotor_current_rpm := spoolermotor_current_rpm - dt * spoolermotor_spin_down_speed/1000;

      IF spoolermotor_current_rpm < 0
      THEN
         spoolermotor_current_rpm = 0;
      FIN;
      IF spoolermotor_current_rpm < spoolermotor_requested_rpm
      THEN
         spoolermotor_current_rpm = spoolermotor_requested_rpm;
      FIN;
   FIN;
END;

! ==========================================================================
! DIAMETER SENSOR
! ==========================================================================

! Returns the current diameter reading of diameter sensor in [mm]
get_diameter_sensor: PROC RETURNS (FLOAT) GLOBAL;
   DCL diameter FLOAT;
   REQUEST sema;
   diameter := diameter_sensor;
   RELEASE sema;
   RETURN(diameter);
END;
! ==========================================================================

DCL elapsed_time FLOAT INIT (0.0);

diameter_sensor_update: PROC (dt FLOAT /* [ms] */);
DCL new_revs_to_add FLOAT;
DCL old_revs_layer FLOAT;
DCL old_revs FLOAT;

elapsed_time := elapsed_time+(dt/1000.0);
   IF spoolermotor_current_rpm > 0
   THEN
      bulk_density := 0.95 + 0.03 * SIN(0.2*elapsed_time) + 0.01 * SIN(0.5*elapsed_time+pi/3); !Wave function in range 0.9 to 1
      diameter_sensor := calc_diameter;
      mass_flow := calc_mass_flow;
      
      !Calculate winding stats
      IF winding == '1'B1 THEN
         new_revs_to_add := spoolermotor_current_rpm * dt / (60*1000);
         old_revs_layer := total_revs_layer;
         old_revs := total_revs;
         
         !Calc filament windings per layer & in total:
         total_revs_layer = total_revs_layer + new_revs_to_add;
         total_revs = total_revs + new_revs_to_add;

         !Calc average diameter per layer & in total:
         avg_dia_layer = (avg_dia_layer*old_revs_layer+diameter_sensor*new_revs_to_add)/total_revs_layer;
         avg_dia = (avg_dia*old_revs+diameter_sensor*new_revs_to_add)/total_revs;
         ! Maybe add std dev in the future, because its probably the more meaningful metric

         !Calc filament mass on spool:
         wound_up_fil_mass = wound_up_fil_mass+mass_flow*dt/1000.0;

         !Change current winding layer if conditions are met:
         IF total_revs_layer*avg_dia_layer > spool_width
         THEN
            winding_diameter = winding_diameter + 2* avg_dia_layer;
            log_layer_stats;
            avg_dia_layer = 0;
            total_revs_layer = 0;
         FIN;
      FIN;
   ELSE
      diameter_sensor := 0.0;
   FIN;
END;
! ==========================================================================

!Calculate winding speed from current spoolermotor rpm and winding diameter
DCL act_winding_speed FLOAT INIT(0.0);
calc_act_winding_speed: PROC RETURNS (FLOAT);
   act_winding_speed = pi * winding_diameter * spoolermotor_current_rpm / 60;
   !logFloat(act_winding_speed);
   RETURN(act_winding_speed);
END;
! ==========================================================================

!Calculate current filament diameter from volumetric flow and current winding speed
calc_diameter: PROC RETURNS (FLOAT);
   DCL diameter FLOAT INIT(0.0);
   diameter = 2 * SQRT (calc_volumetric_flow / (calc_act_winding_speed * pi));
   IF diameter > upper_diameter_limit THEN
      diameter = upper_diameter_limit;
   FIN;
   RETURN(diameter);
END;
! ==========================================================================

!Calculate volumetric flow from screw velocity and geometric parameters
!Multiply by bulk_density to add disturbance
DCL volumetric_flow FLOAT INIT(0.0);
calc_volumetric_flow: PROC RETURNS (FLOAT);
   volumetric_flow = bulk_density*calc_wall_velocity_z*channel_width*channel_depth*F_d / 2;
   RETURN(volumetric_flow);
END;
! ==========================================================================

!Calculate mass flow from volumetric flow and density
DCL mass_flow FLOAT INIT(0.0);
calc_mass_flow: PROC RETURNS (FLOAT);
   mass_flow = calc_volumetric_flow * density;
   RETURN(mass_flow);
END;
! ==========================================================================

!Calculate velocity at cylinder wall (required for vol. flow calculation)
DCL wall_velocity_z FLOAT;
calc_wall_velocity_z: PROC RETURNS (FLOAT);
   wall_velocity_z = pi * screwmotor_current_rpm * D_barrel * COS (theta_b*pi/180) / 60;
   RETURN(wall_velocity_z);
END;

! ==========================================================================
! SPOOL SWITCH
! ==========================================================================

! Returns the current state of the spool contact switch: 0 = off, 1 = on (spool full)
get_contact_switch_state: PROC RETURNS (BIT(1)) GLOBAL;
  DCL state BIT(1);
  REQUEST sema;
  state := contact_switch_enabled;
  RELEASE sema;
  RETURN(state);
END;
! ==========================================================================

contact_switch_update: PROC;
   IF winding_diameter >= max_winding_diameter THEN
      IF contact_switch_enabled == '0'B1 THEN
         contact_switch_enabled := '1'B1;
         PUT 'SPOOL FULL' TO logFile BY A, SKIP;
         TRIGGER contactswitchirpt;
      FIN;
   ELSE
      IF contact_switch_enabled == '1'B1 THEN
         contact_switch_enabled := '0'B1;
      FIN;
   FIN;
END;

! ==========================================================================
! Process surveillance
! ==========================================================================
! Checks temperatures and manages winder status.
process_surv: PROC (dt FLOAT);
   temp_ok := check_temperature_limits;
   overtemp := check_overtemp;
   IF spoolermotor_current_rpm == 0 OR screwmotor_current_rpm == 0 THEN
      IF winding == '1'B1 THEN
         spool_reset;
      FIN;
      prep_time := 0;
      winding := '0'B1;
   ELSE
      IF prep_time < 5000 THEN
         prep_time := prep_time + ENTIER dt;
      ELSE
         winding := '1'B1;
      FIN;
   FIN;
END;

spool_reset: PROC;
   log_spool_stats;
   total_revs_layer = 0;
   total_revs = 0;
   avg_dia_layer = 0;
   avg_dia = 0;
   wound_up_fil_mass = 0;
   prep_time = 0;
   winding_diameter = spool_diameter;
END;

! ==========================================================================
check_temperature_limits: PROC RETURNS (BIT(1));
! Returns true if temperature is within specified range 
   IF min_processing_temp < temperature_sensor AND temperature_sensor < max_processing_temp
   THEN 
      RETURN ('1'B1);
   FIN;
      RETURN ('0'B1);
END;

! ==========================================================================
check_overtemp: PROC RETURNS (BIT(1));
! Returns true if temperature is over max. allowed temperature
   IF temperature_sensor > overtemp_limit THEN
      RETURN ('1'B1);
   FIN;
      RETURN ('0'B1);
END;

! ==========================================================================
! Interprocess communication
! ==========================================================================
! Data connection via message pipes
! Handles 8 byte messages (comparable to a CAN-Bus message data field)

read_msg: PROC RETURNS (BIT(64)) GLOBAL;
   DCL msg BIT(64) INIT ('0'B4);
   REQUEST sema;
   READ msg FROM readMsgPipe;
   RELEASE sema;
   RETURN (msg);
END;
! ==========================================================================

send_msg: PROC(msg BIT(64)) GLOBAL;
   REQUEST sema;
      WRITE msg TO writeMsgPipe;
   RELEASE sema;
END;

! ==========================================================================
! Read config (extruderSim.cfg)
! ==========================================================================
read_config : PROC RETURNS (STRUCT[openErr BIT(1), readErrArray(10) FIXED]);
   DCL data CHAR(70);
   DCL cfgErrors STRUCT [openErr BIT(1), readErrArray(10) FIXED];
   DCL cfgError FIXED;

   ON openFileErr:
      BEGIN;
         cfgErrors.openErr := '1'B1;
         RETURN (cfgErrors);
      END;

   OPEN cfgFile BY IDF(configFileName), OLD;
         GET data FROM cfgFile BY A, RST(cfgError), SKIP;

         !Load general settings:
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(1)), SKIP;
         CONVERT sim_speed_factor FROM data BY RST(cfgErrors.readErrArray(1)),F(4);
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(2)), SKIP;
         CONVERT sim_interval FROM data BY RST(cfgErrors.readErrArray(2)),D(9,3);
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(3)), SKIP;
         CONVERT log_interval FROM data BY RST(cfgErrors.readErrArray(3)),D(9,3);
         GET data FROM cfgFile BY A, RST(cfgError), SKIP;

         !Load spooler settings:
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(4)), SKIP;
         CONVERT max_winding_diameter FROM data BY RST(cfgErrors.readErrArray(4)),F(7,2);
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(5)), SKIP;
         CONVERT spool_width FROM data BY RST(cfgErrors.readErrArray(5)),F(4);
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(6)), SKIP;
         CONVERT spool_diameter FROM data BY RST(cfgErrors.readErrArray(6)),F(4);
         winding_diameter := spool_diameter;
         GET data FROM cfgFile BY A, RST(cfgError), SKIP;

         !Load temperature settings:
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(7)), SKIP;
         CONVERT ambient_temp FROM data BY RST(cfgErrors.readErrArray(7)),F(4);
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(8)), SKIP;
         CONVERT temperature_sensor FROM data BY RST(cfgErrors.readErrArray(8)),F(7,2);
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(9)), SKIP;
         CONVERT min_processing_temp FROM data BY RST(cfgErrors.readErrArray(9)),F(4);
         GET data FROM cfgFile BY A, RST(cfgErrors.readErrArray(10));
         CONVERT max_processing_temp FROM data BY RST(cfgErrors.readErrArray(10)),F(4); 
         
   CLOSE cfgFile;
   RETURN (cfgErrors);
END;

! ==========================================================================
! Logging
! ==========================================================================
openLogfile: PROC(logFileName REF INV CHAR(), addToExistingFile BIT(1));
   DCL fn CHAR(30); ! workarround since REF CHAR() is not accepted as IDF
   fn = logFileName;! see ticket #414

   IF addToExistingFile THEN
      OPEN logFile BY IDF(fn), ANY;
      PUT TO logFile BY EOF;
   ELSE
      ! we want a new log file for each execution
      ! --> just open with ANY and close with CAN
      OPEN logFile BY IDF(fn), ANY;
      CLOSE logFile BY CAN;
      ! previous log file deleted

      ! create a new file
      OPEN logFile BY IDF(fn), NEW;
   FIN;
END;
! ==========================================================================

closeLogfile: PROC;
   CLOSE logFile; 
END;
! ==========================================================================

log: PROC(line  REF INV CHAR() );
   PUT NOW,' SIM: ', line TO logFile BY T(12,3),A,A,SKIP;
   PUT NOW,' SIM: ', line TO writeLogPipe BY T(12,3),A,A,SKIP;   
END;
! ==========================================================================

log_status: TASK PRIO 20;
   DCL line CHAR(100);
   log('Fields:');
   log('|#1|#2|#3|#4|#5|#6|#7|#8|#9|#10|');
   log('# 1: simulation_is_running');
   log('# 2: ScrewMotor RPM');
   log('# 3: SpoolerMotor RPM');
   log('# 4: ScrewHeater PWM');
   log('# 5: Filament Diameter');
   log('# 6: Extruder Temperature');
   log('# 7: Contact Switch Status');
   log('# 8: Current Winding Diameter');
   log('# 9: Avg. filament diameter');
   log('# 10: Nbr. of Windings');
   log('# 11: Spooled Filament Mass');   
   log('----------------------------------------------------------------------------');
   log('|  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  | 10 | 11 |');

   WHILE simulation_is_running
   REPEAT
      REQUEST sema;
      CONVERT '|',
         simulation_is_running, '|',
         screwmotor_current_rpm, '|',
         spoolermotor_current_rpm, '|',
         screwheater_current_pwm, '|',
         diameter_sensor*1000, '|',
         temperature_sensor, '|',
         contact_switch_enabled, '|',
         winding_diameter, '|',
         avg_dia, '|',
         total_revs, '|',
         wound_up_fil_mass, '|'
	   TO line BY A,
         B(1),A,
         F(4),A,
         F(4),A,
         F(4),A,
         F(4),A,
         F(7,3),A,
         B(1),A,
         F(7,3),A,
         F(7,3),A,
         F(7,3),A,
         F(7,3),A;
     RELEASE sema;
     log(line);
     AFTER log_interval RESUME;
   END;
END;
! ==========================================================================

log_layer_stats: PROC;
   PUT 'Layer Stats: Current winding diameter:', winding_diameter, 
   ', Average filament diameter:', avg_dia_layer, 
   ', Filament mass total:', wound_up_fil_mass
   TO logFile BY A,F(8,3),A,F(8,3),A,F(8,3),SKIP;
END;
! ==========================================================================

log_spool_stats: PROC;
   PUT 'Spool Stats: Average filament diameter:', avg_dia, 
   ', Filament mass total:', wound_up_fil_mass, 
   ', Total Windings:', total_revs 
   TO logFile BY A,F(8,3),A,F(8,3),A,F(8,3),SKIP;
END;
! ==========================================================================

MODEND;