/*
 Simulation of a water reservoir, which is filled by a pump.

 [A "BSD license"]
 Copyright (c) 2023 Marcel Schaible
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
 3. The name of the author may not be used to endorse or promote products
    derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

MODULE(SimWatertank);

PROBLEM;

SPC pipe DATION INOUT SYSTEM ALL GLOBAL(SimWatertank);
DCL writeFormatted DATION OUT ALPHIC DIM(*,80) FORWARD CREATED(pipe);
DCL readInternal   DATION IN  CHAR   DIM(*,80) FORWARD CREATED(pipe);

SPC homeFolder DATION INOUT SYSTEM ALL GLOBAL(SimWatertank);
DCL logFile DATION OUT ALPHIC DIM(*,80) FORWARD  CREATED(homeFolder);
DCL fileName CHAR(7) INIT('sim.log');
DCL message CHAR(80);

! ==========================================================================
DCL pi INV FLOAT INIT(3.1415926);

! ==========================================================================
! 
DCL simulation_is_running BIT(1) INIT('0'B1);

! ==========================================================================
! 
DCL sema SEMA PRESET(1);

! ==========================================================================
! 
DCL step FIXED INIT(0);

! ==========================================================================
! Density of water in [kg/m^3]
DCL rho INV FLOAT INIT(1000.0); 

! ==========================================================================
! Accelaration of gravity 
DCL gravity INV FLOAT INIT(9.81); ! [m/s^2]

! ==========================================================================
! Dimensions of the tanks in [m]
DCL tank_length INV FLOAT INIT(2.0);
DCL tank_width  INV FLOAT INIT(2.0);
DCL tank_height INV FLOAT INIT(2.0);

! ==========================================================================
! Current watertank fill level [m^3]
DCL tank_fill_level FLOAT INIT(1.0);

! ==========================================================================
! pipe diameter [m]
DCL pipe_diameter FLOAT INIT(0.06); ! pipe diameter set to 60mm

! ==========================================================================
! Pump
! ==========================================================================

! maximum revolution per min
DCL pump_max_rpm FIXED(15) INIT(2000); 

! if pump is switched on and no rpm is requested, pump will run with this rpm
DCL pump_idle_rpm FIXED(15) INIT(100); 

! Pump motor spinup time in [rpm]
DCL pump_spin_up_speed FIXED(15) INIT(500); 

! Pump motor spindown time in [rpm]
DCL pump_spin_down_speed FIXED(15) INIT(700); 

! requested rpm [revolution/min]
DCL pump_requested_rpm FIXED(15) INIT(0); 

! current rpm [revolution/min]
DCL pump_current_rpm FLOAT INIT(0.0); 

! count how many time the pump has been switched on and off
DCL pump_activations FIXED(31) INIT(0);

! current flow rate provided by the pump
DCL pump_output_flow_rate FLOAT INIT(0.0); ! flow rate in [m^3/s]

! pressure sensor #1 [PA}
DCL pressure_sensor_1 FLOAT INIT(0.0); 

! pressure sensor #2 [PA}
DCL pressure_sensor_2 FLOAT INIT(0.0); 

! valve on/off
! 0, if the valve is closed
! 1, if the pump is open
DCL valve_enabled BIT(1) INIT('0'B1); 

! float switch on/off
! 0, if the pump is switched off
! 1, if the pump is switched on
DCL float_switch_enabled BIT(1) INIT('0'B1); 
 
! Maximum allowed pressure between pump and valve [PA]
DCL max_pressure INV FLOAT INIT(50000.0);

! ==========================================================================
start_simulation: PROC GLOBAL;
  openLogfile(fileName, '0'B1);
  log('STARTING SIMULATION');
  simulation_is_running = '1'B1;
  AFTER 1 SEC ACTIVATE log_status;
  ACTIVATE simulation;
  AFTER 10 SEC ACTIVATE consumer;
  ACTIVATE check_tank_status;
END;

! ==========================================================================
stop_simulation: PROC GLOBAL;
  log('REQUEST STOPPING SIMULATION');
  simulation_is_running = '0'B1;
!  closeLogfile;	  
END;

! ==========================================================================
openLogfile: PROC(logFileName REF INV CHAR(), addToExistingFile BIT(1));
   DCL fn CHAR(30); ! workarround since REF CHAR() is not accepted as IDF
   fn = logFileName;! see ticket #414

   IF addToExistingFile THEN
      OPEN logFile BY IDF(fn), ANY;
      PUT TO logFile BY EOF;
   ELSE
      ! we want a new log file for each execution
      ! --> just open with ANY and close with CAN
      OPEN logFile BY IDF(fn), ANY;
      CLOSE logFile BY CAN;
      ! previous log file deleted

      ! create a new file
      OPEN logFile BY IDF(fn), NEW;
   FIN;
END;

! ==========================================================================
closeLogfile: PROC;
   CLOSE logFile; 
END;

! ==========================================================================
log: PROC(line  REF INV CHAR() );
   PUT NOW,' SIM: ', line TO logFile BY T(12,3),A,A,SKIP;
END;

! ==========================================================================
! Consumer
! ==========================================================================

! Minimal water consumption of consumer in [m^3/s]
DCL min_consumer_dissipation INV FLOAT INIT(0.0);

! Maximal water consumption of consumer in [m^3/s]
DCL max_consumer_dissipation INV FLOAT INIT(0.01);

! Current water consumption of consumer in [m^3/s]
DCL current_consumer_dissipation FLOAT INIT(0.0);

! time of the last update cycle
DCL last_update CLOCK;

! Defines the activation times of the consumer
DCL consumer_activations (1:5) FIXED INIT(10,15,25,5,30);
DCL consumer_current_activation FIXED(15) INIT(1);

! Returns the current water level in the tank in [m]
get_level: PROC RETURNS (FLOAT) GLOBAL;
  RETURN (tank_fill_level);
END;

! Returns the current rotation speed of the pump in [revolutions/min]
get_pump_rotational_speed: PROC RETURNS (FIXED(31)) GLOBAL;
  DCL rpm FIXED(31);
  REQUEST sema;
  rpm := ENTIER pump_current_rpm;
  RELEASE sema;
  RETURN (rpm);
END;

! Request the rpm of the pump in [rpm]
set_pump_rotational_speed: PROC(rpm FIXED(15)) GLOBAL;
  REQUEST sema;
  pump_requested_rpm := rpm;
  RELEASE sema;
END;

! Returns the pressure directly after the pump in [PA]
get_pump_pressure: PROC RETURNS (FLOAT) GLOBAL;
   RETURN (45.0);
END;

! Open the valve
open_valve: PROC GLOBAL;
   REQUEST sema;
   valve_enabled := '1'B1;
   RELEASE sema;
   log('VALVE OPENED');
END;

! Close the valve
close_valve: PROC GLOBAL;
    REQUEST sema;
    valve_enabled := '0'B1;
    RELEASE sema;
    log('VALVE CLOSED');
END;

! Returns the current state of the valve:
! 0: valve closed
! 1: valve open
get_valve_state: PROC RETURNS (BIT(1)) GLOBAL;
  DCL state BIT(1);
  REQUEST sema;
  state := valve_enabled;
  RELEASE sema;
  RETURN(state);
END;


! Calculate the maximum tank capacity in [m^3]
get_watertank_capacity: PROC RETURNS(FLOAT) GLOBAL;
    RETURN (tank_length * tank_width * tank_height);
END;

! Returns the pressure on the tank floor in [PA]
get_watertank_pressure: PROC RETURNS (FLOAT) GLOBAL;
  DCL p FLOAT INIT(0.0);
  REQUEST sema;
  p := pressure_sensor_2;
  RELEASE sema;

  RETURN (p);
END;

! Returns the current state of the float switch:
! 0: float switch off
! 1: float switch on
get_float_switch_state: PROC RETURNS (BIT(1)) GLOBAL;
  DCL state BIT(1);
  REQUEST sema;
  state := float_switch_enabled;
  RELEASE sema;
  RETURN(state);
END;

! Returns the current pressure reading of pressure sensor #1 in [Pa]
get_pressure_sensor_1: PROC RETURNS (FLOAT) GLOBAL;
  DCL pressure FLOAT;
  REQUEST sema;
  pressure := pressure_sensor_1;
  RELEASE sema;
  RETURN(pressure);
END;

! Returns the current pressure reading of pressure sensor #2 in [Pa]
get_pressure_sensor_2: PROC RETURNS (FLOAT) GLOBAL;
  DCL pressure FLOAT;
  REQUEST sema;
  pressure := pressure_sensor_2;
  RELEASE sema;
  RETURN(pressure);
END;

! 
consumer: TASK PRIO 20;
DCL cstep FIXED(15) INIT(0);
   WHILE simulation_is_running
   REPEAT
       REQUEST sema;
       current_consumer_dissipation := 10*ABS(SIN(2*cstep)*COS(3*cstep))/1000;
       cstep := cstep +1;
       RELEASE sema;
       AFTER 1 SEC RESUME;
   END;
END;

!
log_status: TASK PRIO 20;
   DCL line CHAR(80);

  log('Fields:');
  log('|#1|#2|#3|#4|#5|#6|#7|#8|#9|#10|');
  log('# 1: simulation_is_running');
  log('# 2: pump_current_rpm');
  log('# 3: pump_activations');
  log('# 4: pump_output_flow_rate');
  log('# 5: pressure_sensor_1');
  log('# 6: valve_enabled');
  log('# 7: pressure_sensor_2');
  log('# 8: float_switch_enabled');
  log('# 9: current_consumer_dissipation');
  log('#10: tank_fill_level');
  log('----------------------------------------------------------------------------');
  log(' 1    2    3          4          5 6          7 8         9          10');

  WHILE simulation_is_running
   REPEAT
     REQUEST sema;
     CONVERT '|',
             simulation_is_running, '|',
             pump_current_rpm, '|',
             pump_activations, '|',
             pump_output_flow_rate, '|',
             pressure_sensor_1, '|',
             valve_enabled, '|',
             pressure_sensor_2, '|',
     	     float_switch_enabled, '|',	
             current_consumer_dissipation, '|',
             tank_fill_level, '|'
	     TO line BY A,
 	                B(1),A,
			F(4),A,
                        F(4),A,
  			F(10,4),A,  
			F(10,4),A,
			B(1),A,
			F(10,4),A,
			B(1),A,
			F(10,4),A,
           	        F(10,4),A;
     RELEASE sema;
     log(line);
     AFTER 1 SEC RESUME;
   END;
END;

!
pump_update: PROC (dt FLOAT /* [ms] */);
  IF pump_current_rpm == 0 AND pump_requested_rpm > 0.0
  THEN
      pump_activations := pump_activations + 1;
  FIN;

  IF pump_current_rpm < pump_requested_rpm
  THEN
      pump_current_rpm := pump_current_rpm + ENTIER (dt * pump_spin_up_speed / 1000);
      IF pump_current_rpm > pump_requested_rpm
      THEN
        pump_current_rpm = pump_requested_rpm;
      FIN;
  FIN;

  IF pump_current_rpm > pump_requested_rpm
  THEN
     pump_current_rpm := pump_current_rpm - ENTIER (dt * pump_spin_down_speed / 1000);

     IF pump_current_rpm < 0
     THEN
        pump_current_rpm = 0;
     FIN;
  FIN;

  IF pump_current_rpm > pump_max_rpm
  THEN
    pump_current_rpm := pump_max_rpm;	
  FIN;

  !--------------------------------------------
  !                           PI * D^2   RPM
  ! pump_output_flow_rate Q = -------- * ---
  !                              4       60
  !--------------------------------------------
  
  pump_output_flow_rate := ( pi * pipe_diameter**2 / 4) * (pump_current_rpm / 60);
END;

!
pressure_sensor_1_update: PROC (dt FLOAT /* [ms] */);
    DCL a FLOAT INIT (0.0);
    DCL v FLOAT INIT (0.0);
    DCL c FLOAT INIT (0.0);
    
    !---------------------------------------------------------------------------
    !      H * rho * g   rho * v^2
    !  P = ----------- + ---------
    !         1000        2000
    !
    ! with P is the pressure [Pa]
    !      H is the pump head [m]. We set this arbitrarly to 20m.
    !    rho is the fluid density [kg/m^3].
    !        For water we assume rho to approximately 1000 kg/m^3
    !      g is the acceleration due to gravity (approximately 9.81 m/s²)
    !      v is the fluid velocity [m/s]
    !
    !       Q
    !  v = ---
    !       A
    !
    !  Q is the pump flow rate (see procedure pump_update)
    !  A is the area of the pump outlet in [m^2]
    !---------------------------------------------------------------------------

    a := pi * pipe_diameter**2 / 4;
    v := pump_output_flow_rate / a;

    IF pump_current_rpm > 0
    THEN
        c := ( 20 * rho * gravity) / 1000 + ( 1000 * v**2) / pump_current_rpm;
        IF valve_enabled THEN
           pressure_sensor_1 := c;
        ELSE
           pressure_sensor_1 := pressure_sensor_1 + c * 0.001;
	FIN;
    ELSE
        pressure_sensor_1 := 0.0;
    FIN;
END;

pressure_sensor_2_update: PROC (dt FLOAT /* [ms] */);
    !---------------------------------------------------------------------------
    !      
    !  P = rho * g * h
    !
    ! with P is the pressure [Pa]
    !    rho is the fluid density [kg/m^3].
    !        For water we assume rho to approximately 1000 kg/m^3
    !      g is the acceleration due to gravity (approximately 9.81 m/s²)
    !      h is the height of the water head [m]
    !
    !---------------------------------------------------------------------------

    pressure_sensor_2 := (tank_fill_level / (tank_width * tank_length)) * gravity * rho;
END;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Important Note:
! The current consumer dissipation is m³ per sec.
! Therefore we must calculate the dissipation per update interval (100ms)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

tank_update: PROC (dt FLOAT /* [ms] */);
   IF valve_enabled THEN
      tank_fill_level := tank_fill_level +
                         pump_output_flow_rate / 60 -
			 (current_consumer_dissipation / 100);
  ELSE
      tank_fill_level := tank_fill_level -
			 (current_consumer_dissipation / 100);
  FIN;
  
  IF tank_fill_level >= get_watertank_capacity
  THEN
     tank_fill_level := get_watertank_capacity;
  FIN;
      
  IF tank_fill_level < 0.0
  THEN
     tank_fill_level := 0.0;
  FIN;
END;

!
float_switch_update: PROC (dt FLOAT /* [ms] */);
    float_switch_enabled := tank_fill_level >= get_watertank_capacity;
END;

!
check_tank_status: TASK PRIO 20;
  WHILE simulation_is_running
  REPEAT
      REQUEST sema;
      IF tank_fill_level >= get_watertank_capacity
      THEN
         log('ALERT: WATERTANK OVERRUN!');
      FIN;

      IF tank_fill_level == 0.0 AND current_consumer_dissipation > 0.0
      THEN
         log('ALERT: WATERTANK UNDERRUN!');
      FIN;
      RELEASE sema;
      
      AFTER 5 SEC RESUME;
  END;
END;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

/*
pipe_producer: TASK;
   DCL floatVal FLOAT INIT(3.1415);

   OPEN writeFormatted;
   PUT  floatVal TO writeFormatted BY F(6,3), SKIP;
END;

pipe_consumer: TASK;
   DCL line CHAR(80);
   OPEN readInternal;
   READ line FROM readInternal;
   IF line ==' 3.142' THEN
      PUT 'ok' TO console BY A, SKIP;
   ELSE
      PUT 'wrong format' TO console BY A, SKIP;
   FIN;
END;
*/

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
simulation: TASK PRIO 10;
  DCL current_clock CLOCK;
  DCL dt FLOAT;
  DCL msg CHAR(80);
  DCL err FIXED;
  
  WHILE simulation_is_running
  REPEAT
      REQUEST sema;

      current_clock = NOW;
      dt := (current_clock - last_update) / 0.001 SEC; ! [ms]

      pump_update(dt);
      pressure_sensor_1_update(dt);
      tank_update(dt);
      pressure_sensor_2_update(dt);		
      float_switch_update(dt);
      
      RELEASE sema;
      
      last_update = current_clock;

      AFTER 0.01 SEC RESUME;
  END; ! WHILE .. REPEAT

  log('SIMULATION TASK STOPPED');
END;

MODEND;
